#/bin/bash

usage() {
	echo "A simple Task Manager
usage:
	$0 OPTIONS
	OPTIONS are:
	-n		name
	-d		descripton
	-v		verbose mode
	-l LIMIT 	Limit item
	-u		view Unfinished task
	-i		view fInished task
	-a		view All task
	-f ID		task is done
	-c ID		Cancel a task
	-b FILE		Backup database
	-h		help
Power by <http://sqlite.org>"
	exit;
}

unfinished(){
  if [[ $verbose -eq 1 ]]; then
  	sqlite3 -line ~/$db "SELECT T.id,T.name,T.comment,datetime(start,'localtime') AS start FROM tasks AS T INNER JOIN status AS S ON T.status = S.id WHERE status=0 AND end=0 $limit;" | more
  else
  	sqlite3 ~/$db "SELECT id, name, comment,datetime(start,'localtime') AS start FROM tasks WHERE status=0 AND end=0 $limit;" | more
  fi
}

backup(){
	sqlite3 ~/$db .dump > $1
}

# define database name
db='tasks.db3'
# if database isn't esit, cretate it
if [[ ! -f ~/$db ]]; then
	sqlite3 ~/$db "
	CREATE TABLE status (
		id INTEGER PRIMARY KEY AUTOINCREMENT,
		name TEXT NOT NULL,
		comment TEXT NULL
	);
	CREATE TABLE tasks (
		id INTEGER PRIMARY KEY AUTOINCREMENT,
		name TEXT NOT NULL,
		comment TEXT NOT NULL,
		status INTEGER REFERENCES status(id) DEFAULT 0,
		start TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
		end TIMESTAMP DEFAULT 0
	);"
	exit
fi

if [[ "$#" -lt "1" ]]; then
	usage
fi

limit=''

while getopts "vn:d:l:uiaf:c:b:h" opt; do
  case $opt in
  
    v)
     verbose=1
     ;;
    n)
      name="$OPTARG"
      ;;
    d)
      des="$OPTARG"
      ;;
    l)
      limit="LIMIT $OPTARG"
      ;;
    u)
		unfinished
      ;;
    i)
      sqlite3 -line ~/$db "SELECT T.id,T.name,T.comment,datetime(start,'localtime') AS start ,datetime(end,'localtime') AS end FROM tasks AS T INNER JOIN status AS S ON T.status = S.id WHERE status=1 ORDER BY end $limit;" | more
      ;;
    a)
      sqlite3 ~/$db "SELECT T.id,T.name,T.comment,S.name AS status,start,end FROM tasks AS T INNER JOIN status AS S ON T.status = S.id $limit;" | more
      ;;
    f)
      sqlite3 -line ~/$db "UPDATE tasks SET status=1 , end=CURRENT_TIMESTAMP WHERE id = '$OPTARG' AND end=0; SELECT * FROM tasks WHERE id = '$OPTARG';"
      ;;
    c)
      sqlite3 -line ~/$db "UPDATE tasks SET status=2 , end=CURRENT_TIMESTAMP WHERE id = '$OPTARG' AND end=0; SELECT * FROM tasks WHERE id = '$OPTARG';"
      ;;
    b)
      backup $OPTARG
      ;;
    h|*)
	usage
      ;;
  esac
done

if [[ ! -z "$name" && ! -z "$des" ]]; then
	sqlite3 -line ~/$db "INSERT INTO tasks (name,comment) VALUES ('$name','$des'); SELECT * FROM tasks WHERE id = last_insert_rowid();"
elif [[ -z "$name" && -z "$des" ]]; then
	exit;
else
	echo "You have to set value for both name and description"
fi

